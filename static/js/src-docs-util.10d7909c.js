(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{"./src/docs/util.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return i});var o=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/extends.js"),s=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),r=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),a={},c="wrapper";function i(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(r.b)(c,Object(o.a)({},a,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"utilities"},"Utilities"),Object(r.b)("h2",{id:"media-queries"},"Media Queries"),Object(r.b)("p",null,"To use in your css the media queries with the same breakpoints of the grid,\njust import the config as in the example below. If you are not using a\ncustom config, it is not mandatory to pass ",Object(r.b)("em",{parentName:"p"},"props")," to config"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"Tip:")," since react-awesome-styled-grid is mobile-first grid,\nthe css inserted without media querie is applied in mobile resolution.\nThe next media querie (e.g. SM ",Object(r.b)("inlineCode",{parentName:"p"},"config().media['sm']"),"), will apply css on the\ndevices with resolutions above of 48 rem (768px), and so on...")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"import React from 'react'\nimport styled from 'styled-components'\nimport {Container, Row, Col, config} from 'react-awesome-styled-grid'\n\nexport default styled(({ className, children}) => {\n  return (\n    <Container className={className}>\n      <Row>\n        <Col>{children}</Col>\n      </Row>\n    </Container>\n  )\n})`\n  // css here...\n\n  ${props => config(props).media['sm']`\n    color: red;\n    // ...more css here\n  `}\n\n  ${props => config(props).media['md']`\n    color: purple;\n    font-size: 1.5rem;\n    // ...more css here\n  `}\n`\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"Your code")),Object(r.b)("pre",{parentName:"blockquote"},Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"${props => config(props).media['sm']`\n color: red;\n // ...more css here\n`}\n")),Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"Your output")),Object(r.b)("pre",{parentName:"blockquote"},Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-css"}),"@media only screen and (min-width: 48rem) {\n color: red;\n // ...more css here\n}\n"))))}i&&i===Object(i)&&Object.isExtensible(i)&&Object.defineProperty(i,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/docs/util.mdx"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=src-docs-util.97318fc1fa1bc5c294e0.js.map